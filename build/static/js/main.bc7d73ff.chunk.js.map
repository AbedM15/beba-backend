{"version":3,"sources":["Logic/User/User.js","Logic/Vehicle/Vehicle.js","Logic/Trip/Trip.js","Logic/Payments/Payment.js","Api/Revive/trip.js","Api/Revive/payment.js","Api/Revive/user.js","Api/Revive/vehicle.js","DummyData/dummyPayments.js","DummyData/dummyTrips.js","View/StyledComponents/StyledPayment.js","View/PaymentViews/PaymentView.js","View/StyledComponents/StyledDashboard.js","View/PaymentViews/paymentCommands.js","View/PaymentViews/AddPayments.js","View/StyledComponents/StyledTrip.js","View/TripView/TripView.js","View/StyledComponents/StyledVehicle.js","View/Vehicle/vehicleCommands.js","View/Vehicle/AddVehicle.js","View/TripView/tripCommands.js","View/TripView/AddTrip.js","View/Vehicle/VehicleView.js","View/Dashboard/Dashboard.js","DummyData/dummyVehicles.js","View/StyledComponents/StyledReport.js","View/ReportsView/reportCommands.js","View/ReportsView/TripReport.js","View/StyledComponents/StyledForms.js","View/User/userApi.js","View/Routes/routes.js","View/User/LoginView.js","View/User/RegisterView.js","View/Dashboard/userCommands.js","App.js","index.js"],"names":["User","name","immerable","this","password","id","v4","vehicles","Vehicle","numberPlate","numberOfSeats","trips","Trip","destination","fare","payments","Payment","amount","phoneNumber","fullyPaid","reviveTrip","tripJson","map","payment","paymentJson","Object","assign","reviveUser","userJson","vehicle","vehicleJson","trip","addPayment","number","i","push","Math","floor","random","generateDummyPayments","addTrips","generateDummyTrips","StyledAddPayment","styled","StyledPaymentView","PaymentView","StyledDashboardContainer","StyledOverlay","show","StyledButton","tripId","a","token","localStorage","getItem","Error","axios","post","baseUrl","headers","Authorization","response","AddPayment","user","setUser","vehicleIndex","tripIndex","useState","setPayment","seatsRemaining","length","error","setError","onClick","e","stopPropagation","type","placeholder","value","onChange","produce","draft","target","kenyanPhoneNumber","match","data","success","message","StyledAddTrip","StyledTripView","TripView","openPayments","setOpenPayments","showAddPayments","setShowAddPayments","history","useHistory","className","StyledAddVehicle","StyledVehicleView","addVehicle","AddVehicle","setVehicle","kenyanNumberPlate","addTrip","vehicleId","AddTripView","setTrip","undefined","VehicleView","openTrips","setOpenTrips","showAddTrip","setShowAddTrip","slice","generateDummyVehicles","makeFullDummyVehicles","StyledTripReportContainer","get","dummyTrip","StyledFormContainer","StyledGeneralForm","register","login","routes","path","Component","setItem","accessToken","to","exact","showAddVehicleModal","setShowAddVehicleModal","loading","setLoading","useEffect","getUser","then","catch","removeItem","useParams","getFullTrip","index","maskedPhoneNumber","toString","substring","App","route","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc7d73ff.chunk.js","sourcesContent":["import { immerable } from \"immer\";\nimport { v4 } from \"uuid\";\n\nexport class User {\n  [immerable] = true;\n  constructor(name) {\n    this.name = name;\n    this.password = \"\";\n    this.id = v4();\n    this.vehicles = [];\n  }\n}\n","import { immerable } from \"immer\";\nimport { v4 } from \"uuid\";\n\nexport class Vehicle {\n  [immerable] = true;\n  constructor(numberPlate, numberOfSeats) {\n    this.numberOfSeats = numberOfSeats;\n    this.numberPlate = numberPlate;\n    this.id = v4();\n    this.trips = [];\n  }\n}\n","import { immerable } from \"immer\";\nimport { v4 } from \"uuid\";\n\nexport class Trip {\n  [immerable] = true;\n  constructor(destination, fare) {\n    this.destination = destination;\n    this.fare = fare;\n    this.id = v4();\n    this.payments = [];\n  }\n}\n","import { immerable } from \"immer\";\nimport { v4 } from \"uuid\";\n\nexport class Payment {\n  [immerable] = true;\n  constructor(amount, phoneNumber) {\n    this.amount = amount;\n    this.phoneNumber = phoneNumber;\n    this.fullyPaid = false;\n    this.id = v4();\n  }\n}\n","import { Trip } from \"../../Logic/Trip/Trip\";\nimport { revivePayment } from \"./payment\";\n\nexport function reviveTrip(tripJson) {\n  tripJson.payments = tripJson.payments.map((payment) =>\n    revivePayment(payment)\n  );\n  return Object.assign(new Trip(), tripJson);\n}\n","import { Payment } from \"../../Logic/Payments/Payment\";\n\nexport function revivePayment(paymentJson) {\n  return Object.assign(new Payment(), paymentJson);\n}\n","import { User } from \"../../Logic/User/User\";\nimport { reviveVehicle } from \"./vehicle\";\n\nexport function reviveUser(userJson) {\n  userJson.vehicles = userJson.vehicles.map((vehicle) =>\n    reviveVehicle(vehicle)\n  );\n  return Object.assign(new User(), userJson);\n}\n","import { Vehicle } from \"../../Logic/Vehicle/Vehicle\";\nimport { reviveTrip } from \"./trip\";\n\nexport function reviveVehicle(vehicleJson) {\n  vehicleJson.trips = vehicleJson.trips.map((trip) => reviveTrip(trip));\n  return Object.assign(new Vehicle(), vehicleJson);\n}\n","import { Payment } from \"../Logic/Payments/Payment\";\n\nexport function generateDummyPayments(number) {\n  let payments = [];\n  for (let i = 0; i < number; i++) {\n    payments.push(\n      new Payment(\n        Math.floor(Math.random() * 500),\n        Math.floor(Math.random() * 10000000000)\n      )\n    );\n  }\n  return payments;\n}\n\nexport function addPayment(trip, number) {\n  trip.payments = generateDummyPayments(number);\n  return trip;\n}\n","import { Trip } from \"../Logic/Trip/Trip\";\n\nexport function generateDummyTrips(number) {\n  let trips = [];\n  for (let i = 0; i < number; i++) {\n    trips.push(new Trip(\"anywhere\", Math.floor(Math.random() * 500)));\n  }\n  return trips;\n}\n\nexport function addTrips(vehicle, number) {\n  vehicle.trips = generateDummyTrips(number);\n  return vehicle;\n}\n","import styled from \"styled-components\";\n\nexport const StyledAddPayment = styled(\"div\")`\n  padding: 1em 1.5em;\n  border-radius: 0.5em;\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  input {\n    margin: 0.3em 0em;\n  }\n`;\n\nexport const StyledPaymentView = styled(\"div\")`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #4b778d;\n  margin: 0.3em 0em;\n  padding: 0.4em 0.6em;\n  border-radius: 0.5em;\n`;\n","import { StyledPaymentView } from \"../StyledComponents/StyledPayment\";\n\nexport default function PaymentView({ payment }) {\n  return (\n    <StyledPaymentView>\n      <p>{payment.phoneNumber}</p>\n      <p>{payment.amount} Ksh</p>\n    </StyledPaymentView>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const StyledDashboardContainer = styled(\"div\")`\n  width: 60vw;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  .dashboard-header {\n    display: flex;\n    align-items: center;\n  }\n`;\n\nexport const StyledOverlay = styled(\"div\")`\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.4);\n  display: ${({ show }) => (show ? \"flex\" : \"none\")};\n  justify-content: center;\n  align-items: center;\n  color: black;\n`;\n\nexport const StyledButton = styled(\"button\")`\n  background-color: #9f5f80;\n  color: white;\n  padding: 0.4em 0.6em;\n  border: none;\n  border-radius: 0.4em;\n  margin: 0.1em 0.4em;\n`;\n","import axios from \"axios\";\nimport { baseUrl } from \"../../Api/baseUrl\";\n\nexport async function addPayment(payment, tripId) {\n  const token = localStorage.getItem(\"accessToken\");\n  //if the user is not logged in we cannot proceed. So we throw an error\n  if (!token) throw new Error(\"You must be logged in to add payments\");\n\n  //we make the request to the server and wait (asynchronously) for the response\n  const response = await axios.post(\n    baseUrl + \"payment/add\",\n    { payment, tripId },\n    {\n      headers: {\n        //we set the access token to the header. The server needs it\n        Authorization: \"Bearer \" + token,\n      },\n    }\n  );\n  return response;\n}\n","import produce from \"immer\";\nimport { useState } from \"react\";\nimport { addPayment } from \"./paymentCommands\";\nimport { Payment } from \"../../Logic/Payments/Payment\";\nimport { StyledAddPayment } from \"../StyledComponents/StyledPayment\";\n\nexport default function AddPayment({ user, setUser, vehicleIndex, tripIndex }) {\n  const [payment, setPayment] = useState(new Payment(0, \"\"));\n  const seatsRemaining =\n    user.vehicles[vehicleIndex].numberOfSeats -\n    user.vehicles[vehicleIndex].trips[tripIndex].payments.length;\n  const [error, setError] = useState(\"\");\n  return (\n    <StyledAddPayment onClick={(e) => e.stopPropagation()}>\n      <h1>Add payments</h1>\n      {/* here is where we display the errors  */}\n      {error === \"\" ? null : <p>{error}</p>}\n      <p>\n        {seatsRemaining}/{user.vehicles[vehicleIndex].numberOfSeats} seats\n        remaining\n      </p>\n      <input\n        type=\"number\"\n        placeholder=\"Enter phone number...\"\n        value={payment.phoneNumber}\n        onChange={(e) => {\n          setPayment(\n            produce(payment, (draft) => {\n              draft.phoneNumber = e.target.value;\n            })\n          );\n        }}\n      />\n      <button\n        onClick={async () => {\n          try {\n            //payment has to be done through a kenya phone number\n            //remember we are using lipa na mpesa\n            const kenyanPhoneNumber = /(254)\\d{9}/i;\n            if (!payment.phoneNumber.match(kenyanPhoneNumber))\n              throw new Error(\n                \"Invalid phone number. Enter a number with the format 254xxxxxxxxx\"\n              );\n            // if we dont have any seats remaining we can't accept any payment\n            // what would the customer be paying for?\n            if (seatsRemaining > 0) {\n              setUser(\n                produce(user, (draft) => {\n                  draft.vehicles[vehicleIndex].trips[tripIndex].payments.push(\n                    payment\n                  );\n                })\n              );\n              setPayment(new Payment(0, \"\"));\n            }\n            const tripId = user.vehicles[vehicleIndex].trips[tripIndex].id;\n            //we send a request to the server asking it to add payment to a certain trip\n            //this will send the customer an stk push (where they can pay with mpesa)\n            const { data: response } = await addPayment(payment, tripId);\n\n            if (!response.success) {\n              throw new Error(response.message);\n            }\n          } catch (error) {\n            setError(error.message);\n          }\n        }}\n      >\n        Add\n      </button>\n    </StyledAddPayment>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const StyledAddTrip = styled(\"div\")`\n  padding: 1em 1.5em;\n  border-radius: 0.5em;\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  input {\n    margin: 0.3em 0em;\n  }\n`;\n\nexport const StyledTripView = styled(\"div\")`\n  background-color: #393e46;\n  color: white;\n  padding: 0.4em 0.8em;\n  margin: 0.2em;\n  border-radius: 0.1em;\n  .trip-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\n","import { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport AddPayment from \"../PaymentViews/AddPayments\";\nimport PaymentView from \"../PaymentViews/PaymentView\";\nimport {\n  StyledButton,\n  StyledOverlay,\n} from \"../StyledComponents/StyledDashboard\";\nimport { StyledTripView } from \"../StyledComponents/StyledTrip\";\n\nexport default function TripView({\n  trip,\n  vehicleIndex,\n  tripIndex,\n  user,\n  setUser,\n}) {\n  const [openPayments, setOpenPayments] = useState(false);\n\n  // (below) controls the modal to add payments. If it is true the modal is open if not\n  // the modal is closed\n  const [showAddPayments, setShowAddPayments] = useState(false);\n\n  //we need the history object so we can move to other pages programmatically\n  const history = useHistory();\n  return (\n    <StyledTripView>\n      <div>\n        <div className=\"trip-header\">\n          <h3>Destination: {trip.destination}</h3>\n          <div>\n            <StyledButton onClick={() => setShowAddPayments(true)}>\n              Add payments\n            </StyledButton>\n            <StyledButton\n              onClick={() => history.push(\"/report/trip/\" + trip.id)}\n            >\n              Trip report\n            </StyledButton>\n          </div>\n        </div>\n        {openPayments ? (\n          <span className={\"dropdown\"} onClick={() => setOpenPayments(false)}>\n            Close payments\n          </span>\n        ) : (\n          <span className={\"dropdown\"} onClick={() => setOpenPayments(true)}>\n            Open payments\n          </span>\n        )}\n      </div>\n      {openPayments && (\n        <div>\n          {trip.payments.map((payment) => {\n            return <PaymentView key={payment.id} payment={payment} />;\n          })}\n        </div>\n      )}\n      {/* the 'add payments' modal  */}\n      <StyledOverlay\n        show={showAddPayments}\n        onClick={() => {\n          setShowAddPayments(false);\n        }}\n      >\n        <AddPayment {...{ vehicleIndex, tripIndex, user, setUser }} />\n      </StyledOverlay>\n    </StyledTripView>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const StyledAddVehicle = styled(\"div\")`\n  padding: 1em 1.5em;\n  border-radius: 0.5em;\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  input {\n    margin: 0.3em 0em;\n  }\n`;\n\nexport const StyledVehicleView = styled(\"div\")`\n  background-color: #d8e3e7;\n  min-width: 500px;\n  padding: 0.5em;\n  margin: 0.4em 0em;\n  border-radius: 0.5em;\n  .vehicle-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  .dropdown {\n    cursor: pointer;\n    background-color: #ffc996;\n    padding: 0.2em;\n    border-radius: 0.2em;\n    color: black;\n  }\n`;\n","import axios from \"axios\";\nimport { baseUrl } from \"../../Api/baseUrl\";\n\nexport async function addVehicle(vehicle) {\n  //check if the user is logged in first\n  //a user cannot add a vehicle if they are not logged in. If they would, who would be the owner of the vehicle?\n  const token = localStorage.getItem(\"accessToken\");\n  if (!token) throw new Error(\"You need to be logged in to add a vehicle\");\n  const response = await axios.post(\n    baseUrl + \"vehicle/add\",\n    { vehicle },\n    {\n      headers: {\n        //we set the access token, to identify the user when the server receives the request\n        Authorization: \"Bearer \" + token,\n      },\n    }\n  );\n  return response;\n}\n","import produce from \"immer\";\nimport { useState } from \"react\";\nimport { Vehicle } from \"../../Logic/Vehicle/Vehicle\";\nimport { StyledAddVehicle } from \"../StyledComponents/StyledVehicle\";\nimport { addVehicle } from \"./vehicleCommands\";\n\nexport default function AddVehicle({ setUser, user }) {\n  const [vehicle, setVehicle] = useState(new Vehicle(\"\", \"\"));\n  const [error, setError] = useState(\"\");\n  return (\n    <StyledAddVehicle onClick={(e) => e.stopPropagation()}>\n      <h1>Add vehicle</h1>\n      {error === \"\" ? null : <p>{error}</p>}\n      <input\n        type=\"text\"\n        placeholder=\"Enter number plate...\"\n        value={vehicle.numberPlate}\n        onChange={(e) => {\n          setVehicle(\n            produce(vehicle, (draft) => {\n              draft.numberPlate = e.target.value;\n            })\n          );\n        }}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"Enter number of seats...\"\n        value={vehicle.numberOfSeats}\n        onChange={(e) => {\n          setVehicle(\n            produce(vehicle, (draft) => {\n              draft.numberOfSeats = e.target.value;\n            })\n          );\n        }}\n      />\n      <button\n        onClick={async () => {\n          try {\n            //validation\n            const kenyanNumberPlate = /^k[a-z]{2}[-]{0,1}\\d{3}[a-z]{1}/i;\n            //we check if the given number plate is a kenyan number plate\n            if (!vehicle.numberPlate.match(kenyanNumberPlate)) {\n              throw new Error(\n                \"Incorrect number plate. Enter kenyan number plate with format kxx-dddx. where x->letter and d->digit\"\n              );\n            }\n\n            //the number of seats in a vehicle cannot be less than 0\n            if (vehicle.numberOfSeats < 0) {\n              throw new Error(\"Number of seats must be more than 0\");\n            }\n\n            setUser(\n              produce(user, (draft) => {\n                draft.vehicles.push(vehicle);\n              })\n            );\n            //we send a request to the server to add a vehicle\n            const { data: response } = await addVehicle(vehicle);\n            if (response.success) {\n            } else {\n              throw new Error(response.message);\n            }\n          } catch (error) {\n            //we print errors, if any, to the user\n            setError(error.message);\n          }\n        }}\n      >\n        Add Vehicle\n      </button>\n    </StyledAddVehicle>\n  );\n}\n","import axios from \"axios\";\nimport { baseUrl } from \"../../Api/baseUrl\";\n\nexport async function addTrip(trip, vehicleId) {\n  // the user has to be logged in so they can add a trip\n  const token = localStorage.getItem(\"accessToken\");\n\n  //if they are not logged in we throw an error. This error will be catched by the view and it will be displayed to the user\n  if (!token) throw new Error(\"You need to be logged in to add a trip\");\n  const response = await axios.post(\n    baseUrl + \"trip/add\",\n    { trip, vehicleId },\n    {\n      headers: {\n        //We set the authorization headers. The server needs a way to identify a user, right?\n        Authorization: \"Bearer \" + token,\n      },\n    }\n  );\n  return response;\n}\n","import produce from \"immer\";\nimport { useState } from \"react\";\nimport { Trip } from \"../../Logic/Trip/Trip\";\nimport { StyledAddTrip } from \"../StyledComponents/StyledTrip\";\nimport { addTrip } from \"./tripCommands\";\n\nexport default function AddTripView({ setUser, user, vehicleIndex }) {\n  const [trip, setTrip] = useState(new Trip(\"\", \"\"));\n  //the error variable will hold our error messages so we can show them to the user\n  const [error, setError] = useState(\"\");\n  return (\n    <StyledAddTrip onClick={(e) => e.stopPropagation()}>\n      <h1>Add trip</h1>\n      {/* here is where we show errors to the user  */}\n      {error === \"\" ? null : <p>{error}</p>}\n      <input\n        type=\"text\"\n        placeholder=\"Enter destination...\"\n        value={trip.destination}\n        onChange={(e) => {\n          setTrip(\n            produce(trip, (draft) => {\n              draft.destination = e.target.value;\n            })\n          );\n        }}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"Enter fare charge...\"\n        value={trip.fare}\n        onChange={(e) => {\n          setTrip(\n            produce(trip, (draft) => {\n              draft.fare = e.target.value;\n            })\n          );\n        }}\n      />\n      <button\n        onClick={async () => {\n          try {\n            //some validation here\n            //we don't want to add a trip with no destination, do we?\n            if (trip.destination.length <= 0)\n              throw new Error(\"Invalid destination...\");\n\n            //we are in business here, we make money by charging customers to get them to their destinations\n            //we can't charge them anything less than zero. We'd be losing money!\n            if (trip.fare < 0 || trip.fare === undefined)\n              throw new Error(\"Enter a valid fare amount...\");\n            //first we update the frontend with the new data. For responsiveness. If for some reason the\n            //trip is not added in the backend we remove it on the frontend (later)\n            setUser(\n              //we use produce here for immutability. React detects a change by looking at object references. If we\n              //just change an object property the object reference will not change and react won't update the ui to reflect the changes!\n              produce(user, (draft) => {\n                draft.vehicles[vehicleIndex].trips.push(trip);\n              })\n            );\n            const vehicleId = user.vehicles[vehicleIndex].id;\n            //we wait for the server to respond to our add trip request\n            const { data: response } = await addTrip(trip, vehicleId);\n            //if the server says that adding the trip was not successfull we throw an error\n            if (!response.success) {\n              throw new Error(response.message);\n            }\n          } catch (error) {\n            //we catch all the errors here and display them to the user. Remember the error variable at the start of the file?\n            //we set that variable's value to the error message\n            setError(error.message);\n          }\n        }}\n      >\n        Add trip\n      </button>\n    </StyledAddTrip>\n  );\n}\n","import { useState } from \"react\";\nimport {\n  StyledButton,\n  StyledOverlay,\n} from \"../StyledComponents/StyledDashboard\";\nimport { StyledVehicleView } from \"../StyledComponents/StyledVehicle\";\nimport AddTripView from \"../TripView/AddTrip\";\nimport TripView from \"../TripView/TripView\";\n\nexport default function VehicleView({ vehicle, vehicleIndex, user, setUser }) {\n  const [openTrips, setOpenTrips] = useState(false);\n  //this (below) controls if the modal to add a trip is open or closed\n  const [showAddTrip, setShowAddTrip] = useState(false);\n  return (\n    <StyledVehicleView>\n      <div>\n        <div className=\"vehicle-header\">\n          <h3>Plate: {vehicle.numberPlate}</h3>\n          <StyledButton onClick={() => setShowAddTrip(true)}>\n            Add trip\n          </StyledButton>\n        </div>\n        {openTrips ? (\n          <span\n            className={\"dropdown open-trips\"}\n            onClick={() => setOpenTrips(false)}\n          >\n            Close trips\n          </span>\n        ) : (\n          <span\n            className={\"dropdown close-trips\"}\n            onClick={() => setOpenTrips(true)}\n          >\n            Open trips\n          </span>\n        )}\n      </div>\n      {openTrips && (\n        <div>\n          <h4>Trips</h4>\n          {vehicle.trips.map((trip, tripIndex) => {\n            return (\n              <TripView\n                key={trip.id}\n                trip={trip}\n                {...{ tripIndex, user, setUser, vehicleIndex }}\n              />\n            );\n          })}\n        </div>\n      )}\n      {/* the modal that pops up and allows us to add trips  */}\n      <StyledOverlay show={showAddTrip} onClick={() => setShowAddTrip(false)}>\n        <AddTripView {...{ user, setUser, vehicleIndex }} />\n      </StyledOverlay>\n    </StyledVehicleView>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { reviveUser } from \"../../Api/Revive/user\";\nimport { makeFullDummyVehicles } from \"../../DummyData/dummyVehicles\";\nimport { User } from \"../../Logic/User/User\";\nimport PaymentView from \"../PaymentViews/PaymentView\";\nimport {\n  StyledButton,\n  StyledDashboardContainer,\n  StyledOverlay,\n} from \"../StyledComponents/StyledDashboard\";\nimport TripView from \"../TripView/TripView\";\nimport AddVehicle from \"../Vehicle/AddVehicle\";\nimport VehicleView from \"../Vehicle/VehicleView\";\nimport { getUser } from \"./userCommands\";\nconst dummyUser = new User(\"Dummy\");\ndummyUser.vehicles = makeFullDummyVehicles(4);\nexport function Dashboad() {\n  const [user, setUser] = useState(new User());\n  const [showAddVehicleModal, setShowAddVehicleModal] = useState(false);\n  const history = useHistory();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n\n  //this (below) runs every time a page loads\n  useEffect(() => {\n    //we want to get the currently logged in user from the server\n    getUser()\n      .then(({ data: response }) => {\n        if (!response.success) throw new Error(response.message);\n\n        //revive user converts the json we receive from the server to a proper javascript object\n        //with methods\n        setUser(reviveUser(response.user));\n      })\n      .then(() => {\n        //we stop loading once we get the user data\n        setLoading(false);\n      })\n      //we catch all the errors here and show them to the user\n      .catch((error) => setError(error.message));\n  }, []);\n  if (loading) {\n    //if the server hasn't responded we wait. What else can we do?\n    //also, if there is an error. We can't proceed so we still have to wait\n    return error === \"\" ? <p>Loading...</p> : <p>{error}</p>;\n  } else {\n    return (\n      <StyledDashboardContainer>\n        <div className=\"dashboard-header\">\n          <h1>Registered Vehicles</h1>\n          <StyledButton onClick={() => setShowAddVehicleModal(true)}>\n            Add Vehicle\n          </StyledButton>\n          <StyledButton\n            onClick={() => {\n              localStorage.removeItem(\"accessToken\");\n              history.push(\"/\");\n            }}\n          >\n            Log out\n          </StyledButton>\n        </div>\n        {/* we list all the vehicles that we added in the past  */}\n        {user.vehicles.map((vehicle, vehicleIndex) => {\n          return (\n            <VehicleView\n              key={vehicle.id}\n              vehicle={vehicle}\n              vehicleIndex={vehicleIndex}\n              user={user}\n              setUser={setUser}\n              setUser={setUser}\n            />\n          );\n        })}\n        {/* the modal that allows us to add vehicles  */}\n        <StyledOverlay\n          onClick={() => {\n            setShowAddVehicleModal(false);\n          }}\n          show={showAddVehicleModal}\n        >\n          <AddVehicle setUser={setUser} user={user} />\n        </StyledOverlay>\n      </StyledDashboardContainer>\n    );\n  }\n}\n","import { v4 } from \"uuid\";\nimport { Vehicle } from \"../Logic/Vehicle/Vehicle\";\nimport { addPayment } from \"./dummyPayments\";\nimport { addTrips } from \"./dummyTrips\";\n\nexport function generateDummyVehicles(number) {\n  let vehicles = [];\n  for (let i = 0; i < number; i++) {\n    vehicles.push(\n      new Vehicle(v4().slice(0, 6), Math.floor(Math.random() * 25))\n    );\n  }\n  return vehicles;\n}\n\nexport function makeFullDummyVehicles(number) {\n  let vehicles = generateDummyVehicles(number).map((vehicle) =>\n    addTrips(vehicle, number)\n  );\n  vehicles = vehicles.map((vehicle) => {\n    vehicle.trips = vehicle.trips.map((trip) => addPayment(trip, 3));\n    return vehicle;\n  });\n  return vehicles;\n}\n","import styled from \"styled-components\";\n\nexport const StyledTripReportContainer = styled(\"div\")`\n  display: flex;\n\n  flex-direction: column;\n  align-items: center;\n\n  th,\n  td {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n  }\n  td,\n  th {\n    padding: 0.3em 0.4em;\n    text-align: left;\n  }\n  th {\n    height: 50px;\n    background-color: #132c33;\n    color: white;\n  }\n  tr:nth-child(even) {\n    background-color: rgba(0, 0, 0, 0.2);\n  }\n  table {\n    border-collapse: collapse;\n    min-width: 500px;\n  }\n`;\n","import axios from \"axios\";\nimport { baseUrl } from \"../../Api/baseUrl\";\n\nexport async function getFullTrip(tripId) {\n  const token = localStorage.getItem(\"accessToken\");\n  //we check if a user is logged in first\n  if (!token) throw new Error(\"You must be logged in to view this page!\");\n\n  const response = await axios.get(baseUrl + \"trip/\" + tripId, {\n    headers: {\n      //we set the authorization token, the server need a way to identify the user\n      Authorization: \"Bearer \" + token,\n    },\n  });\n\n  return response;\n}\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { reviveTrip } from \"../../Api/Revive/trip\";\nimport { addPayment } from \"../../DummyData/dummyPayments\";\nimport { Trip } from \"../../Logic/Trip/Trip\";\nimport { StyledTripReportContainer } from \"../StyledComponents/StyledReport\";\nimport { getFullTrip } from \"./reportCommands\";\n\nconst dummyTrip = addPayment(new Trip(\"Buruburu\", 50), 4);\nexport function TripReportView() {\n  const [trip, setTrip] = useState(dummyTrip);\n  const { tripId } = useParams();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  // (below) loads on every page load\n  useEffect(() => {\n    try {\n      //we get the full trip from the server\n      //but what is the difference between a full trip and just a normal trip?\n      //a full trip contains full data such as payments whereas a normal trip doesn't have payments\n      //we use normal trips where we just want to get the name of the trip (to save bandwidth)\n      getFullTrip(tripId)\n        .then(({ data: response }) => {\n          //if the server response indicates there was an error (no success) we throw an error\n          //we catch this error in just a bit\n          if (!response.success) throw new Error(response.message);\n\n          //so what does the revive trip function do?\n          //we receive data as json from the server. A json object wont have the methods we defined in the\n          //trip class. The revive function turns the json into an\n          //object with prototypes. It returns a trip object with all the methods in our trip class\n          const trip = reviveTrip(response.trip);\n          setTrip(trip);\n          //we stop loading\n          setLoading(false);\n        })\n        //here is where we catch all the errors and display them to the user\n        .catch((error) => setError(error.message));\n    } catch (error) {\n      //we catch even more errors here\n      setError(error.message);\n    }\n  }, []);\n  if (loading) {\n    //if the server hasn't responded yet we just load and wait for it. What else can we do?\n    return error === \"\" ? <p>Loading...</p> : <p>{error}</p>;\n  } else {\n    return (\n      <StyledTripReportContainer>\n        <div>\n          <h1>Trip report</h1>\n          {error === \"\" ? null : <p>{error}</p>}\n          <table>\n            <tr>\n              <th>Seat Number</th>\n              <th>Paid by</th>\n              <th>Paid or not paid</th>\n            </tr>\n            <tbody>\n              {trip.payments.map((payment, index) => {\n                const maskedPhoneNumber =\n                  payment.phoneNumber.toString().substring(0, 6) + \"*********\";\n                return (\n                  <tr>\n                    <td>{index}</td>\n                    <td>{maskedPhoneNumber}</td>\n                    <td>{true ? \"True\" : \"False\"}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </StyledTripReportContainer>\n    );\n  }\n}\n","import styled from \"styled-components\";\n\nexport const StyledFormContainer = styled(\"div\")`\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const StyledGeneralForm = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  input {\n    margin: 0.2em 0em;\n  }\n  button {\n    width: 100%;\n    margin: 0.1em 0em;\n  }\n  .extra {\n    text-align: center;\n    width: 100%;\n  }\n`;\n","import { baseUrl } from \"../../Api/baseUrl\";\nimport axios from \"axios\";\n\nexport async function register(user) {\n  //we send a registration request to the server\n  const response = await axios.post(baseUrl + \"user/register\", { user });\n  return response;\n}\n\nexport async function login(user) {\n  // we send a login request to the server\n  const response = await axios.post(baseUrl + \"user/login\", { user });\n  return response;\n}\n","import { Dashboad } from \"../Dashboard/Dashboard\";\nimport { TripReportView } from \"../ReportsView/TripReport\";\nimport LoginView from \"../User/LoginView\";\nimport RegisterView from \"../User/RegisterView\";\nimport VehicleView from \"../Vehicle/VehicleView\";\n\nexport const routes = [\n  {\n    path: \"/\",\n    Component: LoginView,\n    exact: true,\n  },\n  {\n    path: \"/register\",\n    Component: RegisterView,\n    exact: true,\n  },\n  {\n    path: \"/dashboard\",\n    Component: Dashboad,\n    exact: true,\n  },\n  {\n    path: \"/report/trip/:tripId\",\n    Component: TripReportView,\n    exact: true,\n  },\n];\n","import produce from \"immer\";\nimport { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { User } from \"../../Logic/User/User\";\nimport { StyledButton } from \"../StyledComponents/StyledDashboard\";\nimport {\n  StyledFormContainer,\n  StyledGeneralForm,\n} from \"../StyledComponents/StyledForms\";\nimport { login } from \"./userApi\";\n\nexport default function LoginView() {\n  const [user, setUser] = useState(new User(\"\"));\n  //if (below) the error is not an empty string it will be printed to the user\n  const [error, setError] = useState(\"\");\n  //we need this so we can navigate to another page automatically after passing in the correct credentials\n  const history = useHistory();\n  return (\n    <StyledFormContainer>\n      <StyledGeneralForm>\n        <h1>Log In</h1>\n        {/* here is where we print the error  */}\n        {error !== \"\" ? <p>{error}</p> : null}\n        <input\n          type=\"text\"\n          placeholder=\"Enter name...\"\n          value={user.name}\n          onChange={(e) => {\n            setUser(\n              produce(user, (draft) => {\n                draft.name = e.target.value;\n              })\n            );\n          }}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Enter password...\"\n          value={user.password}\n          onChange={(e) => {\n            setUser(\n              produce(user, (draft) => {\n                draft.password = e.target.value;\n              })\n            );\n          }}\n        />\n        <StyledButton\n          onClick={async (e) => {\n            try {\n              const { data: response } = await login(user);\n              //we check if the request to login was a success\n              if (response.success) {\n                localStorage.setItem(\"accessToken\", response.accessToken);\n                //it there are no errors we proceed to the dashboard\n                history.push(\"/dashboard\");\n              } else {\n                throw new Error(response.message);\n              }\n            } catch (error) {\n              setError(error.message);\n            }\n          }}\n        >\n          Submit\n        </StyledButton>\n        <div className=\"extra\">\n          <Link to=\"/register\">Or register</Link>\n        </div>\n      </StyledGeneralForm>\n    </StyledFormContainer>\n  );\n}\n","import produce from \"immer\";\nimport { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { User } from \"../../Logic/User/User\";\nimport { StyledButton } from \"../StyledComponents/StyledDashboard\";\nimport {\n  StyledFormContainer,\n  StyledGeneralForm,\n} from \"../StyledComponents/StyledForms\";\nimport { register } from \"./userApi\";\nexport default function RegisterView() {\n  const [user, setUser] = useState(new User(\"\"));\n  //(below) if the error is not an empty string it will be printed to the user\n  const [error, setError] = useState(\"\");\n\n  //we need this so we can move to other pages programmatically\n  const history = useHistory();\n  return (\n    <StyledFormContainer>\n      <StyledGeneralForm>\n        <h1>Register</h1>\n        {/* we display any errors here  */}\n        {error !== \"\" ? <p>{error}</p> : null}\n        <input\n          type=\"text\"\n          placeholder=\"Enter name...\"\n          value={user.name}\n          onChange={(e) => {\n            setUser(\n              produce(user, (draft) => {\n                draft.name = e.target.value;\n              })\n            );\n          }}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Enter password...\"\n          value={user.password}\n          onChange={(e) => {\n            setUser(\n              produce(user, (draft) => {\n                draft.password = e.target.value;\n              })\n            );\n          }}\n        />\n        <StyledButton\n          onClick={async () => {\n            try {\n              const { data: response } = await register(user);\n              //we check if the registration request was a success\n              if (response.success) {\n                localStorage.setItem(\"accessToken\", response.accessToken);\n                //if no errors are found we proceed to the dashboard\n                history.push(\"/dashboard\");\n              } else {\n                throw new Error(response.message);\n              }\n            } catch (error) {\n              setError(error.message);\n            }\n          }}\n        >\n          Submit\n        </StyledButton>\n        <div className=\"extra\">\n          <Link to=\"/\">Or login</Link>\n        </div>\n      </StyledGeneralForm>\n    </StyledFormContainer>\n  );\n}\n","import axios from \"axios\";\nimport { baseUrl } from \"../../Api/baseUrl\";\n\nexport function getUser() {\n  const token = localStorage.getItem(\"accessToken\");\n\n  //we check if the user is logged in. If not we throw an error. We cannot proceed\n  if (!token)\n    throw new Error(\"You must be logged in to view this page correctly!\");\n\n  const response = axios.get(baseUrl + \"user/\", {\n    headers: {\n      // we set the token to the authorization header. The server needs it\n      Authorization: \"Bearer \" + token,\n    },\n  });\n  return response;\n}\n","import \"./App.css\";\nimport { Dashboad } from \"./View/Dashboard/Dashboard\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { routes } from \"./View/Routes/routes\";\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        {routes.map((route) => {\n          return (\n            <Route path={route.path} exact={route.exact}>\n              {<route.Component />}\n            </Route>\n          );\n        })}\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}